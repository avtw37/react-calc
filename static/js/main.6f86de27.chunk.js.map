{"version":3,"sources":["components/Button.jsx","App.jsx","components/Input.jsx","components/ClearButton.jsx","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","Button","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","props","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","App","_this","Object","_Users_alexisdimas_Desktop_react_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_alexisdimas_Desktop_react_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_alexisdimas_Desktop_react_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","addToInput","setState","input","state","handleEqual","eval","handleMultiply","replace","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","_components_Input__WEBPACK_IMPORTED_MODULE_8__","_components_Button__WEBPACK_IMPORTED_MODULE_7__","_components_ClearButton__WEBPACK_IMPORTED_MODULE_9__","handleClear","Component","Input","ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f86de27.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = val => {\n  return !isNaN(val) || val === \".\" || val === \"=\";\n};\n\nexport const Button = props => (\n  <div\n    className={`button-wrapper ${\n      isOperator(props.children) ? null : \"operator\"\n    }`}\n    onClick={() => props.handleClick(props.children)}\n  >\n    {props.children}\n  </div>\n);\n\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport { ClearButton } from \"./components/ClearButton\";\n// import * as math from \"mathjs\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state ={\n      input: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({ input: this.state.input + val });\n  };\n\n  handleEqual = () => {\n    this.setState({ input: eval(this.state.input) });\n  };\n\n  handleMultiply = val => {\n    if (val === \"x\") {\n      this.setState({input: this.state.input + val.replace(\"x\", \"*\")});\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input}></Input>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.handleMultiply}>x</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({ input: \"\"})}>\n              Clear\n            </ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = props => <div className=\"input\">{props.input}</div>;\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nexport const ClearButton = props => (\n  <div className=\"clear-btn\" onClick={props.handleClear}>\n    {props.children}\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}